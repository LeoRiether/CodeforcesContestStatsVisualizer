{"version":3,"sources":["api.ts","index.ts"],"names":[],"mappings":"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","file":"src.d865b71f.js","sourceRoot":"../src","sourcesContent":["\nconst api_base = 'https://codeforces.com/api';\n\nexport interface StrDict {\n    [key:string]: string;\n}\n\nexport interface Creds {\n    key: string;\n    secret: string;\n}\n\nconst rand_hex = () =>\n    (~~(Math.random() * 16)).toString(16);\n\nconst sha512 : (str: string) => Promise<string> = str =>\n  crypto.subtle.digest(\"SHA-512\", new TextEncoder().encode(str))\n  .then(buf =>\n    Array.prototype.map.call(new Uint8Array(buf), (x:number)=>(('00'+x.toString(16)).slice(-2))).join(''));\n\nasync function api_sig(request_base: string, secret: string): Promise<string> {\n    const rand = new Array(6).fill(null).map(rand_hex).join('');\n    const thingy = `${rand}/${request_base}#${secret}`;\n    return rand + (await sha512(thingy));\n}\n\nasync function request(creds: Creds, method: string, params: StrDict): Promise<any> {\n    params['time'] = (~~(new Date().getTime() / 1000)).toString();\n    params['apiKey'] = creds.key;\n\n    let param_list = Object.entries(params);\n    param_list.sort(); // This might work\n\n    const request_base = method + '?' + param_list.map(([key, value]) => `${key}=${value}`).join('&');\n    const signature = await api_sig(request_base, creds.secret);\n    const request_url = `${api_base}/${request_base}&apiSig=${signature}`;\n\n    const response = await fetch(request_url).then(res => res.json());\n    if (response['status'] != 'OK')\n        throw `The Codeforces API returned status ${response['status']}. Full response: ${JSON.stringify(response)}`;\n\n    return response['result'];\n}\n\nexport function contest_status(creds: Creds, contestId: string): Promise<StrDict> {\n    return request(creds, 'contest.status', { contestId });\n}","import * as api from './api';\nasync function main() {\n    if (localStorage.getItem('cf_key') === null || localStorage.getItem('cf_secret') === null) {\n        localStorage.setItem('cf_key', prompt('Your API key'));\n        localStorage.setItem('cf_secret', prompt('Your API secret'));\n    }\n\n    // Yeah, an extension or userscript could easily get hold of these\n    let creds: api.Creds = {\n        key: localStorage.getItem('cf_key'),\n        secret: localStorage.getItem('cf_secret'),\n    };\n\n    let res = await api.contest_status(creds, '329742');\n    document.write(JSON.stringify(res));\n}\n\nmain();\n\n\n"]}